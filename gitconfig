[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[user]
	name = Roland Pangu
	email = faruzzy@gmail.com
[core]
	whitespace = trailing-space,space-before-tab,indent-with-non-tab
    editor = vim
	quotepath = false
	excludesfile = /Users/szd0qs/.gitignore_global
	autocrlf = input
	#attributesfile = ~/.gitattributes
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustexitcode = true

[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
[alias]
	# thanks to http://stackoverflow.com/questions/11269256/how-to-name-and-retrieve-a-stash-by-name-in-git
	sshow = "!f() { git stash show stash^{/$*} -p; }; f"
	sapply = "!f() { git stash apply stash^{/$*}; }; f"

    st = status -sb
    c = commit
    all = commit -am
    br = branch
    co = checkout
    df = diff --color --color-words --abbrev
    dfc = diff --cached
    lg = log -p
	logr3 = log --stat -M -3
	logit = log --stat -M
	l = log --stat -C
    lol = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ls = ls-files
    ign = ls-files -o -i --exclude-standard			#Show files ignored by git:
    p = push
    shoot = push origin --delete
    up = pull
    unstage = reset HEAD --
	hardrs = reset --hard HEAD
    prev = checkout -
    discard = checkout -- 
    rlc = !git reset --hard HEAD~1                  # Remove last commit
    ulc = reset --soft HEAD~1                       # Undo last commit
	up = push -f origin HEAD^:master
	update = !git fetch upstream && git rebase upstream/`git rev-parse --abbrev-ref HEAD`

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the `master` branch

    mpr = "!f() { \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git rebase master pr/$1 && \
            git checkout master && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"
[help]
	autocorrect = 10
[color]
    ui = auto
	grep = auto
	interactive = auto
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[fetch]
	prune = true
[diff]
	compactionHeuristic = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
	upstream = bold cyan
[color "status"]
	# staged changes
    added = yellow
	updated = bold white green
	# un-staged changes
    changed = green
    untracked = cyan
	nobranch = bold red white
[merge]
    log = true
[github]
    user = faruzzy
	email = faruzzy@gmail.com
	username = faruzzy
[mergetool]
    keepBackup = true
[push]
    default = simple
[web]
	browser = open
[browser "ch"]
	cmd = open -a \"/Applications/Google\\ Chrome.app\"
